// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: inx.proto

package inx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockMetadata_BlockState int32

const (
	BlockMetadata_BLOCK_STATE_UNKNOWN   BlockMetadata_BlockState = 0
	BlockMetadata_BLOCK_STATE_PENDING   BlockMetadata_BlockState = 1
	BlockMetadata_BLOCK_STATE_ACCEPTED  BlockMetadata_BlockState = 2
	BlockMetadata_BLOCK_STATE_CONFIRMED BlockMetadata_BlockState = 3
	BlockMetadata_BLOCK_STATE_FINALIZED BlockMetadata_BlockState = 4
	BlockMetadata_BLOCK_STATE_REJECTED  BlockMetadata_BlockState = 5
	BlockMetadata_BLOCK_STATE_FAILED    BlockMetadata_BlockState = 6
)

// Enum value maps for BlockMetadata_BlockState.
var (
	BlockMetadata_BlockState_name = map[int32]string{
		0: "BLOCK_STATE_UNKNOWN",
		1: "BLOCK_STATE_PENDING",
		2: "BLOCK_STATE_ACCEPTED",
		3: "BLOCK_STATE_CONFIRMED",
		4: "BLOCK_STATE_FINALIZED",
		5: "BLOCK_STATE_REJECTED",
		6: "BLOCK_STATE_FAILED",
	}
	BlockMetadata_BlockState_value = map[string]int32{
		"BLOCK_STATE_UNKNOWN":   0,
		"BLOCK_STATE_PENDING":   1,
		"BLOCK_STATE_ACCEPTED":  2,
		"BLOCK_STATE_CONFIRMED": 3,
		"BLOCK_STATE_FINALIZED": 4,
		"BLOCK_STATE_REJECTED":  5,
		"BLOCK_STATE_FAILED":    6,
	}
)

func (x BlockMetadata_BlockState) Enum() *BlockMetadata_BlockState {
	p := new(BlockMetadata_BlockState)
	*p = x
	return p
}

func (x BlockMetadata_BlockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockMetadata_BlockState) Descriptor() protoreflect.EnumDescriptor {
	return file_inx_proto_enumTypes[0].Descriptor()
}

func (BlockMetadata_BlockState) Type() protoreflect.EnumType {
	return &file_inx_proto_enumTypes[0]
}

func (x BlockMetadata_BlockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockMetadata_BlockState.Descriptor instead.
func (BlockMetadata_BlockState) EnumDescriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{17, 0}
}

type BlockMetadata_BlockFailureReason int32

const (
	BlockMetadata_BLOCK_FAILURE_REASON_NONE                                  BlockMetadata_BlockFailureReason = 0
	BlockMetadata_BLOCK_FAILURE_REASON_IS_TOO_OLD                            BlockMetadata_BlockFailureReason = 1
	BlockMetadata_BLOCK_FAILURE_REASON_PARENT_IS_TOO_OLD                     BlockMetadata_BlockFailureReason = 2
	BlockMetadata_BLOCK_FAILURE_REASON_BOOKING_FAILURE                       BlockMetadata_BlockFailureReason = 3
	BlockMetadata_BLOCK_FAILURE_REASON_DROPPED_DUE_TO_CONGESTION             BlockMetadata_BlockFailureReason = 4
	BlockMetadata_BLOCK_FAILURE_REASON_PAYLOAD_INVALID                       BlockMetadata_BlockFailureReason = 5
	BlockMetadata_BLOCK_FAILURE_REASON_ORPHANED_DUE_NEGATIVE_CREDITS_BALANCE BlockMetadata_BlockFailureReason = 6
)

// Enum value maps for BlockMetadata_BlockFailureReason.
var (
	BlockMetadata_BlockFailureReason_name = map[int32]string{
		0: "BLOCK_FAILURE_REASON_NONE",
		1: "BLOCK_FAILURE_REASON_IS_TOO_OLD",
		2: "BLOCK_FAILURE_REASON_PARENT_IS_TOO_OLD",
		3: "BLOCK_FAILURE_REASON_BOOKING_FAILURE",
		4: "BLOCK_FAILURE_REASON_DROPPED_DUE_TO_CONGESTION",
		5: "BLOCK_FAILURE_REASON_PAYLOAD_INVALID",
		6: "BLOCK_FAILURE_REASON_ORPHANED_DUE_NEGATIVE_CREDITS_BALANCE",
	}
	BlockMetadata_BlockFailureReason_value = map[string]int32{
		"BLOCK_FAILURE_REASON_NONE":                                  0,
		"BLOCK_FAILURE_REASON_IS_TOO_OLD":                            1,
		"BLOCK_FAILURE_REASON_PARENT_IS_TOO_OLD":                     2,
		"BLOCK_FAILURE_REASON_BOOKING_FAILURE":                       3,
		"BLOCK_FAILURE_REASON_DROPPED_DUE_TO_CONGESTION":             4,
		"BLOCK_FAILURE_REASON_PAYLOAD_INVALID":                       5,
		"BLOCK_FAILURE_REASON_ORPHANED_DUE_NEGATIVE_CREDITS_BALANCE": 6,
	}
)

func (x BlockMetadata_BlockFailureReason) Enum() *BlockMetadata_BlockFailureReason {
	p := new(BlockMetadata_BlockFailureReason)
	*p = x
	return p
}

func (x BlockMetadata_BlockFailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockMetadata_BlockFailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_inx_proto_enumTypes[1].Descriptor()
}

func (BlockMetadata_BlockFailureReason) Type() protoreflect.EnumType {
	return &file_inx_proto_enumTypes[1]
}

func (x BlockMetadata_BlockFailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockMetadata_BlockFailureReason.Descriptor instead.
func (BlockMetadata_BlockFailureReason) EnumDescriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{17, 1}
}

type BlockMetadata_TransactionState int32

const (
	BlockMetadata_TRANSACTION_STATE_NO_TRANSACTION BlockMetadata_TransactionState = 0
	BlockMetadata_TRANSACTION_STATE_PENDING        BlockMetadata_TransactionState = 1
	BlockMetadata_TRANSACTION_STATE_ACCEPTED       BlockMetadata_TransactionState = 2
	BlockMetadata_TRANSACTION_STATE_CONFIRMED      BlockMetadata_TransactionState = 3
	BlockMetadata_TRANSACTION_STATE_FINALIZED      BlockMetadata_TransactionState = 4
	BlockMetadata_TRANSACTION_STATE_FAILED         BlockMetadata_TransactionState = 5
)

// Enum value maps for BlockMetadata_TransactionState.
var (
	BlockMetadata_TransactionState_name = map[int32]string{
		0: "TRANSACTION_STATE_NO_TRANSACTION",
		1: "TRANSACTION_STATE_PENDING",
		2: "TRANSACTION_STATE_ACCEPTED",
		3: "TRANSACTION_STATE_CONFIRMED",
		4: "TRANSACTION_STATE_FINALIZED",
		5: "TRANSACTION_STATE_FAILED",
	}
	BlockMetadata_TransactionState_value = map[string]int32{
		"TRANSACTION_STATE_NO_TRANSACTION": 0,
		"TRANSACTION_STATE_PENDING":        1,
		"TRANSACTION_STATE_ACCEPTED":       2,
		"TRANSACTION_STATE_CONFIRMED":      3,
		"TRANSACTION_STATE_FINALIZED":      4,
		"TRANSACTION_STATE_FAILED":         5,
	}
)

func (x BlockMetadata_TransactionState) Enum() *BlockMetadata_TransactionState {
	p := new(BlockMetadata_TransactionState)
	*p = x
	return p
}

func (x BlockMetadata_TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockMetadata_TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_inx_proto_enumTypes[2].Descriptor()
}

func (BlockMetadata_TransactionState) Type() protoreflect.EnumType {
	return &file_inx_proto_enumTypes[2]
}

func (x BlockMetadata_TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockMetadata_TransactionState.Descriptor instead.
func (BlockMetadata_TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{17, 2}
}

type BlockMetadata_TransactionFailureReason int32

const (
	BlockMetadata_TRANSACTION_FAILURE_REASON_NONE                                          BlockMetadata_TransactionFailureReason = 0
	BlockMetadata_TRANSACTION_FAILURE_REASON_UTXO_INPUT_ALREADY_SPENT                      BlockMetadata_TransactionFailureReason = 1
	BlockMetadata_TRANSACTION_FAILURE_REASON_CONFLICTING                                   BlockMetadata_TransactionFailureReason = 2
	BlockMetadata_TRANSACTION_FAILURE_REASON_UTXO_INPUT_INVALID                            BlockMetadata_TransactionFailureReason = 3
	BlockMetadata_TRANSACTION_FAILURE_REASON_TX_TYPE_INVALID                               BlockMetadata_TransactionFailureReason = 4
	BlockMetadata_TRANSACTION_FAILURE_REASON_SUM_OF_INPUT_AND_OUTPUT_VALUES_DOES_NOT_MATCH BlockMetadata_TransactionFailureReason = 5
	BlockMetadata_TRANSACTION_FAILURE_REASON_UNLOCK_BLOCK_SIGNATURE_INVALID                BlockMetadata_TransactionFailureReason = 6
	BlockMetadata_TRANSACTION_FAILURE_REASON_CONFIGURED_TIMELOCK_NOT_YET_EXPIRED           BlockMetadata_TransactionFailureReason = 7
	BlockMetadata_TRANSACTION_FAILURE_REASON_GIVEN_NATIVE_TOKENS_INVALID                   BlockMetadata_TransactionFailureReason = 8
	BlockMetadata_TRANSACTION_FAILURE_REASON_RETURN_AMOUNT_NOT_FULFILLED                   BlockMetadata_TransactionFailureReason = 9
	BlockMetadata_TRANSACTION_FAILURE_REASON_INPUT_UNLOCK_INVALID                          BlockMetadata_TransactionFailureReason = 10
	BlockMetadata_TRANSACTION_FAILURE_REASON_INPUTS_COMMITMENT_INVALID                     BlockMetadata_TransactionFailureReason = 11
	BlockMetadata_TRANSACTION_FAILURE_REASON_SENDER_NOT_UNLOCKED                           BlockMetadata_TransactionFailureReason = 12
	BlockMetadata_TRANSACTION_FAILURE_REASON_CHAIN_STATE_TRANSITION_INVALID                BlockMetadata_TransactionFailureReason = 13
	BlockMetadata_TRANSACTION_FAILURE_REASON_INPUT_CREATION_AFTER_TX_CREATION              BlockMetadata_TransactionFailureReason = 14
	BlockMetadata_TRANSACTION_FAILURE_REASON_MANA_AMOUNT_INVALID                           BlockMetadata_TransactionFailureReason = 15
	BlockMetadata_TRANSACTION_FAILURE_REASON_BIC_INPUT_INVALID                             BlockMetadata_TransactionFailureReason = 16
	BlockMetadata_TRANSACTION_FAILURE_REASON_REWARD_INPUT_INVALID                          BlockMetadata_TransactionFailureReason = 17
	BlockMetadata_TRANSACTION_FAILURE_REASON_COMMITMENT_INPUT_INVALID                      BlockMetadata_TransactionFailureReason = 18
	BlockMetadata_TRANSACTION_FAILURE_REASON_NO_STAKING_FEATURE                            BlockMetadata_TransactionFailureReason = 19
	BlockMetadata_TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_STAKING_REWARD                BlockMetadata_TransactionFailureReason = 20
	BlockMetadata_TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_DELEGATION_REWARD             BlockMetadata_TransactionFailureReason = 21
	BlockMetadata_TRANSACTION_FAILURE_REASON_SEMANTIC_VALIDATION_FAILED                    BlockMetadata_TransactionFailureReason = 255
)

// Enum value maps for BlockMetadata_TransactionFailureReason.
var (
	BlockMetadata_TransactionFailureReason_name = map[int32]string{
		0:   "TRANSACTION_FAILURE_REASON_NONE",
		1:   "TRANSACTION_FAILURE_REASON_UTXO_INPUT_ALREADY_SPENT",
		2:   "TRANSACTION_FAILURE_REASON_CONFLICTING",
		3:   "TRANSACTION_FAILURE_REASON_UTXO_INPUT_INVALID",
		4:   "TRANSACTION_FAILURE_REASON_TX_TYPE_INVALID",
		5:   "TRANSACTION_FAILURE_REASON_SUM_OF_INPUT_AND_OUTPUT_VALUES_DOES_NOT_MATCH",
		6:   "TRANSACTION_FAILURE_REASON_UNLOCK_BLOCK_SIGNATURE_INVALID",
		7:   "TRANSACTION_FAILURE_REASON_CONFIGURED_TIMELOCK_NOT_YET_EXPIRED",
		8:   "TRANSACTION_FAILURE_REASON_GIVEN_NATIVE_TOKENS_INVALID",
		9:   "TRANSACTION_FAILURE_REASON_RETURN_AMOUNT_NOT_FULFILLED",
		10:  "TRANSACTION_FAILURE_REASON_INPUT_UNLOCK_INVALID",
		11:  "TRANSACTION_FAILURE_REASON_INPUTS_COMMITMENT_INVALID",
		12:  "TRANSACTION_FAILURE_REASON_SENDER_NOT_UNLOCKED",
		13:  "TRANSACTION_FAILURE_REASON_CHAIN_STATE_TRANSITION_INVALID",
		14:  "TRANSACTION_FAILURE_REASON_INPUT_CREATION_AFTER_TX_CREATION",
		15:  "TRANSACTION_FAILURE_REASON_MANA_AMOUNT_INVALID",
		16:  "TRANSACTION_FAILURE_REASON_BIC_INPUT_INVALID",
		17:  "TRANSACTION_FAILURE_REASON_REWARD_INPUT_INVALID",
		18:  "TRANSACTION_FAILURE_REASON_COMMITMENT_INPUT_INVALID",
		19:  "TRANSACTION_FAILURE_REASON_NO_STAKING_FEATURE",
		20:  "TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_STAKING_REWARD",
		21:  "TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_DELEGATION_REWARD",
		255: "TRANSACTION_FAILURE_REASON_SEMANTIC_VALIDATION_FAILED",
	}
	BlockMetadata_TransactionFailureReason_value = map[string]int32{
		"TRANSACTION_FAILURE_REASON_NONE":                                          0,
		"TRANSACTION_FAILURE_REASON_UTXO_INPUT_ALREADY_SPENT":                      1,
		"TRANSACTION_FAILURE_REASON_CONFLICTING":                                   2,
		"TRANSACTION_FAILURE_REASON_UTXO_INPUT_INVALID":                            3,
		"TRANSACTION_FAILURE_REASON_TX_TYPE_INVALID":                               4,
		"TRANSACTION_FAILURE_REASON_SUM_OF_INPUT_AND_OUTPUT_VALUES_DOES_NOT_MATCH": 5,
		"TRANSACTION_FAILURE_REASON_UNLOCK_BLOCK_SIGNATURE_INVALID":                6,
		"TRANSACTION_FAILURE_REASON_CONFIGURED_TIMELOCK_NOT_YET_EXPIRED":           7,
		"TRANSACTION_FAILURE_REASON_GIVEN_NATIVE_TOKENS_INVALID":                   8,
		"TRANSACTION_FAILURE_REASON_RETURN_AMOUNT_NOT_FULFILLED":                   9,
		"TRANSACTION_FAILURE_REASON_INPUT_UNLOCK_INVALID":                          10,
		"TRANSACTION_FAILURE_REASON_INPUTS_COMMITMENT_INVALID":                     11,
		"TRANSACTION_FAILURE_REASON_SENDER_NOT_UNLOCKED":                           12,
		"TRANSACTION_FAILURE_REASON_CHAIN_STATE_TRANSITION_INVALID":                13,
		"TRANSACTION_FAILURE_REASON_INPUT_CREATION_AFTER_TX_CREATION":              14,
		"TRANSACTION_FAILURE_REASON_MANA_AMOUNT_INVALID":                           15,
		"TRANSACTION_FAILURE_REASON_BIC_INPUT_INVALID":                             16,
		"TRANSACTION_FAILURE_REASON_REWARD_INPUT_INVALID":                          17,
		"TRANSACTION_FAILURE_REASON_COMMITMENT_INPUT_INVALID":                      18,
		"TRANSACTION_FAILURE_REASON_NO_STAKING_FEATURE":                            19,
		"TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_STAKING_REWARD":                20,
		"TRANSACTION_FAILURE_REASON_FAILED_TO_CLAIM_DELEGATION_REWARD":             21,
		"TRANSACTION_FAILURE_REASON_SEMANTIC_VALIDATION_FAILED":                    255,
	}
)

func (x BlockMetadata_TransactionFailureReason) Enum() *BlockMetadata_TransactionFailureReason {
	p := new(BlockMetadata_TransactionFailureReason)
	*p = x
	return p
}

func (x BlockMetadata_TransactionFailureReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockMetadata_TransactionFailureReason) Descriptor() protoreflect.EnumDescriptor {
	return file_inx_proto_enumTypes[3].Descriptor()
}

func (BlockMetadata_TransactionFailureReason) Type() protoreflect.EnumType {
	return &file_inx_proto_enumTypes[3]
}

func (x BlockMetadata_TransactionFailureReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockMetadata_TransactionFailureReason.Descriptor instead.
func (BlockMetadata_TransactionFailureReason) EnumDescriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{17, 3}
}

type LedgerUpdate_Marker_MarkerType int32

const (
	LedgerUpdate_Marker_BEGIN LedgerUpdate_Marker_MarkerType = 0
	LedgerUpdate_Marker_END   LedgerUpdate_Marker_MarkerType = 1
)

// Enum value maps for LedgerUpdate_Marker_MarkerType.
var (
	LedgerUpdate_Marker_MarkerType_name = map[int32]string{
		0: "BEGIN",
		1: "END",
	}
	LedgerUpdate_Marker_MarkerType_value = map[string]int32{
		"BEGIN": 0,
		"END":   1,
	}
)

func (x LedgerUpdate_Marker_MarkerType) Enum() *LedgerUpdate_Marker_MarkerType {
	p := new(LedgerUpdate_Marker_MarkerType)
	*p = x
	return p
}

func (x LedgerUpdate_Marker_MarkerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LedgerUpdate_Marker_MarkerType) Descriptor() protoreflect.EnumDescriptor {
	return file_inx_proto_enumTypes[4].Descriptor()
}

func (LedgerUpdate_Marker_MarkerType) Type() protoreflect.EnumType {
	return &file_inx_proto_enumTypes[4]
}

func (x LedgerUpdate_Marker_MarkerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LedgerUpdate_Marker_MarkerType.Descriptor instead.
func (LedgerUpdate_Marker_MarkerType) EnumDescriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{30, 0, 0}
}

type NoParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoParams) Reset() {
	*x = NoParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoParams) ProtoMessage() {}

func (x *NoParams) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoParams.ProtoReflect.Descriptor instead.
func (*NoParams) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{0}
}

// Node
type NodeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseToken          *BaseToken               `protobuf:"bytes,1,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	ProtocolParameters []*RawProtocolParameters `protobuf:"bytes,2,rep,name=protocol_parameters,json=protocolParameters,proto3" json:"protocol_parameters,omitempty"`
}

func (x *NodeConfiguration) Reset() {
	*x = NodeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfiguration) ProtoMessage() {}

func (x *NodeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfiguration.ProtoReflect.Descriptor instead.
func (*NodeConfiguration) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{1}
}

func (x *NodeConfiguration) GetBaseToken() *BaseToken {
	if x != nil {
		return x.BaseToken
	}
	return nil
}

func (x *NodeConfiguration) GetProtocolParameters() []*RawProtocolParameters {
	if x != nil {
		return x.ProtocolParameters
	}
	return nil
}

type BaseToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TickerSymbol    string `protobuf:"bytes,2,opt,name=ticker_symbol,json=tickerSymbol,proto3" json:"ticker_symbol,omitempty"`
	Unit            string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Subunit         string `protobuf:"bytes,4,opt,name=subunit,proto3" json:"subunit,omitempty"`
	Decimals        uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	UseMetricPrefix bool   `protobuf:"varint,6,opt,name=use_metric_prefix,json=useMetricPrefix,proto3" json:"use_metric_prefix,omitempty"`
}

func (x *BaseToken) Reset() {
	*x = BaseToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseToken) ProtoMessage() {}

func (x *BaseToken) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseToken.ProtoReflect.Descriptor instead.
func (*BaseToken) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{2}
}

func (x *BaseToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BaseToken) GetTickerSymbol() string {
	if x != nil {
		return x.TickerSymbol
	}
	return ""
}

func (x *BaseToken) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *BaseToken) GetSubunit() string {
	if x != nil {
		return x.Subunit
	}
	return ""
}

func (x *BaseToken) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *BaseToken) GetUseMetricPrefix() bool {
	if x != nil {
		return x.UseMetricPrefix
	}
	return false
}

type NodeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHealthy                 bool        `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	LastAcceptedBlockSlot     uint64      `protobuf:"varint,4,opt,name=last_accepted_block_slot,json=lastAcceptedBlockSlot,proto3" json:"last_accepted_block_slot,omitempty"`
	LastConfirmedBlockSlot    uint64      `protobuf:"varint,5,opt,name=last_confirmed_block_slot,json=lastConfirmedBlockSlot,proto3" json:"last_confirmed_block_slot,omitempty"`
	LatestCommitment          *Commitment `protobuf:"bytes,6,opt,name=latest_commitment,json=latestCommitment,proto3" json:"latest_commitment,omitempty"`
	LatestFinalizedCommitment *Commitment `protobuf:"bytes,7,opt,name=latest_finalized_commitment,json=latestFinalizedCommitment,proto3" json:"latest_finalized_commitment,omitempty"`
	PruningSlot               uint64      `protobuf:"varint,8,opt,name=pruning_slot,json=pruningSlot,proto3" json:"pruning_slot,omitempty"`
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{3}
}

func (x *NodeStatus) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *NodeStatus) GetLastAcceptedBlockSlot() uint64 {
	if x != nil {
		return x.LastAcceptedBlockSlot
	}
	return 0
}

func (x *NodeStatus) GetLastConfirmedBlockSlot() uint64 {
	if x != nil {
		return x.LastConfirmedBlockSlot
	}
	return 0
}

func (x *NodeStatus) GetLatestCommitment() *Commitment {
	if x != nil {
		return x.LatestCommitment
	}
	return nil
}

func (x *NodeStatus) GetLatestFinalizedCommitment() *Commitment {
	if x != nil {
		return x.LatestFinalizedCommitment
	}
	return nil
}

func (x *NodeStatus) GetPruningSlot() uint64 {
	if x != nil {
		return x.PruningSlot
	}
	return 0
}

type NodeStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CooldownInMilliseconds uint32 `protobuf:"varint,1,opt,name=cooldown_in_milliseconds,json=cooldownInMilliseconds,proto3" json:"cooldown_in_milliseconds,omitempty"`
}

func (x *NodeStatusRequest) Reset() {
	*x = NodeStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatusRequest) ProtoMessage() {}

func (x *NodeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatusRequest.ProtoReflect.Descriptor instead.
func (*NodeStatusRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{4}
}

func (x *NodeStatusRequest) GetCooldownInMilliseconds() uint32 {
	if x != nil {
		return x.CooldownInMilliseconds
	}
	return 0
}

type RawProtocolParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	StartEpoch      uint64 `protobuf:"varint,2,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	Params          []byte `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *RawProtocolParameters) Reset() {
	*x = RawProtocolParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawProtocolParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawProtocolParameters) ProtoMessage() {}

func (x *RawProtocolParameters) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawProtocolParameters.ProtoReflect.Descriptor instead.
func (*RawProtocolParameters) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{5}
}

func (x *RawProtocolParameters) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *RawProtocolParameters) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *RawProtocolParameters) GetParams() []byte {
	if x != nil {
		return x.Params
	}
	return nil
}

// Commitments
type RawCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawCommitment) Reset() {
	*x = RawCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawCommitment) ProtoMessage() {}

func (x *RawCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawCommitment.ProtoReflect.Descriptor instead.
func (*RawCommitment) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{6}
}

func (x *RawCommitment) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommitmentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommitmentId) Reset() {
	*x = CommitmentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitmentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentId) ProtoMessage() {}

func (x *CommitmentId) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentId.ProtoReflect.Descriptor instead.
func (*CommitmentId) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{7}
}

func (x *CommitmentId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type CommitmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitmentIndex uint64        `protobuf:"varint,1,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
	CommitmentId    *CommitmentId `protobuf:"bytes,2,opt,name=commitment_id,json=commitmentId,proto3" json:"commitment_id,omitempty"`
}

func (x *CommitmentRequest) Reset() {
	*x = CommitmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentRequest) ProtoMessage() {}

func (x *CommitmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentRequest.ProtoReflect.Descriptor instead.
func (*CommitmentRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{8}
}

func (x *CommitmentRequest) GetCommitmentIndex() uint64 {
	if x != nil {
		return x.CommitmentIndex
	}
	return 0
}

func (x *CommitmentRequest) GetCommitmentId() *CommitmentId {
	if x != nil {
		return x.CommitmentId
	}
	return nil
}

type SlotRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start_slot is the initial slot to get. Use 0 to start from the current node status.
	StartSlot uint64 `protobuf:"varint,1,opt,name=start_slot,json=startSlot,proto3" json:"start_slot,omitempty"`
	// end_slot is the last slot to get (inclusive). Use 0 to keep getting new confirmed slots.
	EndSlot uint64 `protobuf:"varint,2,opt,name=end_slot,json=endSlot,proto3" json:"end_slot,omitempty"`
}

func (x *SlotRangeRequest) Reset() {
	*x = SlotRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotRangeRequest) ProtoMessage() {}

func (x *SlotRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotRangeRequest.ProtoReflect.Descriptor instead.
func (*SlotRangeRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{9}
}

func (x *SlotRangeRequest) GetStartSlot() uint64 {
	if x != nil {
		return x.StartSlot
	}
	return 0
}

func (x *SlotRangeRequest) GetEndSlot() uint64 {
	if x != nil {
		return x.EndSlot
	}
	return 0
}

type Commitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitmentId *CommitmentId  `protobuf:"bytes,1,opt,name=commitment_id,json=commitmentId,proto3" json:"commitment_id,omitempty"`
	Commitment   *RawCommitment `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *Commitment) Reset() {
	*x = Commitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commitment) ProtoMessage() {}

func (x *Commitment) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commitment.ProtoReflect.Descriptor instead.
func (*Commitment) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{10}
}

func (x *Commitment) GetCommitmentId() *CommitmentId {
	if x != nil {
		return x.CommitmentId
	}
	return nil
}

func (x *Commitment) GetCommitment() *RawCommitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type CommitmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitmentIndex uint64        `protobuf:"varint,1,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
	CommitmentId    *CommitmentId `protobuf:"bytes,2,opt,name=commitment_id,json=commitmentId,proto3" json:"commitment_id,omitempty"`
}

func (x *CommitmentInfo) Reset() {
	*x = CommitmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentInfo) ProtoMessage() {}

func (x *CommitmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentInfo.ProtoReflect.Descriptor instead.
func (*CommitmentInfo) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{11}
}

func (x *CommitmentInfo) GetCommitmentIndex() uint64 {
	if x != nil {
		return x.CommitmentIndex
	}
	return 0
}

func (x *CommitmentInfo) GetCommitmentId() *CommitmentId {
	if x != nil {
		return x.CommitmentId
	}
	return nil
}

type CommitmentAndProtocolParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment                *Commitment            `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	CurrentProtocolParameters *RawProtocolParameters `protobuf:"bytes,2,opt,name=current_protocol_parameters,json=currentProtocolParameters,proto3" json:"current_protocol_parameters,omitempty"`
}

func (x *CommitmentAndProtocolParameters) Reset() {
	*x = CommitmentAndProtocolParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitmentAndProtocolParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentAndProtocolParameters) ProtoMessage() {}

func (x *CommitmentAndProtocolParameters) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentAndProtocolParameters.ProtoReflect.Descriptor instead.
func (*CommitmentAndProtocolParameters) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{12}
}

func (x *CommitmentAndProtocolParameters) GetCommitment() *Commitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *CommitmentAndProtocolParameters) GetCurrentProtocolParameters() *RawProtocolParameters {
	if x != nil {
		return x.CurrentProtocolParameters
	}
	return nil
}

// Blocks
type RawBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawBlock) Reset() {
	*x = RawBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBlock) ProtoMessage() {}

func (x *RawBlock) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBlock.ProtoReflect.Descriptor instead.
func (*RawBlock) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{13}
}

func (x *RawBlock) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BlockId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlockId) Reset() {
	*x = BlockId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockId) ProtoMessage() {}

func (x *BlockId) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockId.ProtoReflect.Descriptor instead.
func (*BlockId) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{14}
}

func (x *BlockId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId *BlockId  `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Block   *RawBlock `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{15}
}

func (x *Block) GetBlockId() *BlockId {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Block) GetBlock() *RawBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type BlockWithMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *BlockMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Block    *RawBlock      `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockWithMetadata) Reset() {
	*x = BlockWithMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockWithMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWithMetadata) ProtoMessage() {}

func (x *BlockWithMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWithMetadata.ProtoReflect.Descriptor instead.
func (*BlockWithMetadata) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{16}
}

func (x *BlockWithMetadata) GetMetadata() *BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BlockWithMetadata) GetBlock() *RawBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type BlockMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId            *BlockId                               `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockState         BlockMetadata_BlockState               `protobuf:"varint,2,opt,name=block_state,json=blockState,proto3,enum=inx.BlockMetadata_BlockState" json:"block_state,omitempty"`
	BlockFailureReason BlockMetadata_BlockFailureReason       `protobuf:"varint,3,opt,name=block_failure_reason,json=blockFailureReason,proto3,enum=inx.BlockMetadata_BlockFailureReason" json:"block_failure_reason,omitempty"`
	TxState            BlockMetadata_TransactionState         `protobuf:"varint,4,opt,name=tx_state,json=txState,proto3,enum=inx.BlockMetadata_TransactionState" json:"tx_state,omitempty"`
	TxFailureReason    BlockMetadata_TransactionFailureReason `protobuf:"varint,5,opt,name=tx_failure_reason,json=txFailureReason,proto3,enum=inx.BlockMetadata_TransactionFailureReason" json:"tx_failure_reason,omitempty"`
}

func (x *BlockMetadata) Reset() {
	*x = BlockMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMetadata) ProtoMessage() {}

func (x *BlockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMetadata.ProtoReflect.Descriptor instead.
func (*BlockMetadata) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{17}
}

func (x *BlockMetadata) GetBlockId() *BlockId {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *BlockMetadata) GetBlockState() BlockMetadata_BlockState {
	if x != nil {
		return x.BlockState
	}
	return BlockMetadata_BLOCK_STATE_UNKNOWN
}

func (x *BlockMetadata) GetBlockFailureReason() BlockMetadata_BlockFailureReason {
	if x != nil {
		return x.BlockFailureReason
	}
	return BlockMetadata_BLOCK_FAILURE_REASON_NONE
}

func (x *BlockMetadata) GetTxState() BlockMetadata_TransactionState {
	if x != nil {
		return x.TxState
	}
	return BlockMetadata_TRANSACTION_STATE_NO_TRANSACTION
}

func (x *BlockMetadata) GetTxFailureReason() BlockMetadata_TransactionFailureReason {
	if x != nil {
		return x.TxFailureReason
	}
	return BlockMetadata_TRANSACTION_FAILURE_REASON_NONE
}

// Payload
type RawPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawPayload) Reset() {
	*x = RawPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPayload) ProtoMessage() {}

func (x *RawPayload) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPayload.ProtoReflect.Descriptor instead.
func (*RawPayload) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{18}
}

func (x *RawPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Tips
type TipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	AllowSemiLazy bool   `protobuf:"varint,2,opt,name=allow_semiLazy,json=allowSemiLazy,proto3" json:"allow_semiLazy,omitempty"`
}

func (x *TipsRequest) Reset() {
	*x = TipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsRequest) ProtoMessage() {}

func (x *TipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsRequest.ProtoReflect.Descriptor instead.
func (*TipsRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{19}
}

func (x *TipsRequest) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TipsRequest) GetAllowSemiLazy() bool {
	if x != nil {
		return x.AllowSemiLazy
	}
	return false
}

type TipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tips []*BlockId `protobuf:"bytes,1,rep,name=tips,proto3" json:"tips,omitempty"`
}

func (x *TipsResponse) Reset() {
	*x = TipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsResponse) ProtoMessage() {}

func (x *TipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsResponse.ProtoReflect.Descriptor instead.
func (*TipsResponse) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{20}
}

func (x *TipsResponse) GetTips() []*BlockId {
	if x != nil {
		return x.Tips
	}
	return nil
}

type TipsMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalInMilliseconds uint32 `protobuf:"varint,1,opt,name=interval_in_milliseconds,json=intervalInMilliseconds,proto3" json:"interval_in_milliseconds,omitempty"`
}

func (x *TipsMetricRequest) Reset() {
	*x = TipsMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsMetricRequest) ProtoMessage() {}

func (x *TipsMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsMetricRequest.ProtoReflect.Descriptor instead.
func (*TipsMetricRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{21}
}

func (x *TipsMetricRequest) GetIntervalInMilliseconds() uint32 {
	if x != nil {
		return x.IntervalInMilliseconds
	}
	return 0
}

type TipsMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonLazyPoolSize  uint32 `protobuf:"varint,1,opt,name=non_lazy_pool_size,json=nonLazyPoolSize,proto3" json:"non_lazy_pool_size,omitempty"`
	SemiLazyPoolSize uint32 `protobuf:"varint,2,opt,name=semi_lazy_pool_size,json=semiLazyPoolSize,proto3" json:"semi_lazy_pool_size,omitempty"`
}

func (x *TipsMetric) Reset() {
	*x = TipsMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TipsMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsMetric) ProtoMessage() {}

func (x *TipsMetric) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsMetric.ProtoReflect.Descriptor instead.
func (*TipsMetric) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{22}
}

func (x *TipsMetric) GetNonLazyPoolSize() uint32 {
	if x != nil {
		return x.NonLazyPoolSize
	}
	return 0
}

func (x *TipsMetric) GetSemiLazyPoolSize() uint32 {
	if x != nil {
		return x.SemiLazyPoolSize
	}
	return 0
}

// UTXO
type TransactionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TransactionId) Reset() {
	*x = TransactionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionId) ProtoMessage() {}

func (x *TransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionId.ProtoReflect.Descriptor instead.
func (*TransactionId) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{23}
}

func (x *TransactionId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type OutputId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OutputId) Reset() {
	*x = OutputId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputId) ProtoMessage() {}

func (x *OutputId) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputId.ProtoReflect.Descriptor instead.
func (*OutputId) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{24}
}

func (x *OutputId) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type OutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestCommitmentId *CommitmentId `protobuf:"bytes,1,opt,name=latest_commitment_id,json=latestCommitmentId,proto3" json:"latest_commitment_id,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*OutputResponse_Output
	//	*OutputResponse_Spent
	Payload isOutputResponse_Payload `protobuf_oneof:"payload"`
}

func (x *OutputResponse) Reset() {
	*x = OutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputResponse) ProtoMessage() {}

func (x *OutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputResponse.ProtoReflect.Descriptor instead.
func (*OutputResponse) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{25}
}

func (x *OutputResponse) GetLatestCommitmentId() *CommitmentId {
	if x != nil {
		return x.LatestCommitmentId
	}
	return nil
}

func (m *OutputResponse) GetPayload() isOutputResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *OutputResponse) GetOutput() *LedgerOutput {
	if x, ok := x.GetPayload().(*OutputResponse_Output); ok {
		return x.Output
	}
	return nil
}

func (x *OutputResponse) GetSpent() *LedgerSpent {
	if x, ok := x.GetPayload().(*OutputResponse_Spent); ok {
		return x.Spent
	}
	return nil
}

type isOutputResponse_Payload interface {
	isOutputResponse_Payload()
}

type OutputResponse_Output struct {
	Output *LedgerOutput `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type OutputResponse_Spent struct {
	Spent *LedgerSpent `protobuf:"bytes,3,opt,name=spent,proto3,oneof"`
}

func (*OutputResponse_Output) isOutputResponse_Payload() {}

func (*OutputResponse_Spent) isOutputResponse_Payload() {}

type UnspentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestCommitmentId *CommitmentId `protobuf:"bytes,1,opt,name=latest_commitment_id,json=latestCommitmentId,proto3" json:"latest_commitment_id,omitempty"`
	Output             *LedgerOutput `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *UnspentOutput) Reset() {
	*x = UnspentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentOutput) ProtoMessage() {}

func (x *UnspentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentOutput.ProtoReflect.Descriptor instead.
func (*UnspentOutput) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{26}
}

func (x *UnspentOutput) GetLatestCommitmentId() *CommitmentId {
	if x != nil {
		return x.LatestCommitmentId
	}
	return nil
}

func (x *UnspentOutput) GetOutput() *LedgerOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type RawOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RawOutput) Reset() {
	*x = RawOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawOutput) ProtoMessage() {}

func (x *RawOutput) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawOutput.ProtoReflect.Descriptor instead.
func (*RawOutput) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{27}
}

func (x *RawOutput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LedgerOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputId    *OutputId  `protobuf:"bytes,1,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	BlockId     *BlockId   `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"`
	SlotBooked  uint64     `protobuf:"varint,3,opt,name=slot_booked,json=slotBooked,proto3" json:"slot_booked,omitempty"`
	SlotCreated uint64     `protobuf:"varint,4,opt,name=slot_created,json=slotCreated,proto3" json:"slot_created,omitempty"`
	Output      *RawOutput `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *LedgerOutput) Reset() {
	*x = LedgerOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerOutput) ProtoMessage() {}

func (x *LedgerOutput) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerOutput.ProtoReflect.Descriptor instead.
func (*LedgerOutput) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{28}
}

func (x *LedgerOutput) GetOutputId() *OutputId {
	if x != nil {
		return x.OutputId
	}
	return nil
}

func (x *LedgerOutput) GetBlockId() *BlockId {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *LedgerOutput) GetSlotBooked() uint64 {
	if x != nil {
		return x.SlotBooked
	}
	return 0
}

func (x *LedgerOutput) GetSlotCreated() uint64 {
	if x != nil {
		return x.SlotCreated
	}
	return 0
}

func (x *LedgerOutput) GetOutput() *RawOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

type LedgerSpent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output             *LedgerOutput  `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	TransactionIdSpent *TransactionId `protobuf:"bytes,2,opt,name=transaction_id_spent,json=transactionIdSpent,proto3" json:"transaction_id_spent,omitempty"`
	SlotSpent          uint64         `protobuf:"varint,3,opt,name=slot_spent,json=slotSpent,proto3" json:"slot_spent,omitempty"`
}

func (x *LedgerSpent) Reset() {
	*x = LedgerSpent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerSpent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerSpent) ProtoMessage() {}

func (x *LedgerSpent) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerSpent.ProtoReflect.Descriptor instead.
func (*LedgerSpent) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{29}
}

func (x *LedgerSpent) GetOutput() *LedgerOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *LedgerSpent) GetTransactionIdSpent() *TransactionId {
	if x != nil {
		return x.TransactionIdSpent
	}
	return nil
}

func (x *LedgerSpent) GetSlotSpent() uint64 {
	if x != nil {
		return x.SlotSpent
	}
	return 0
}

type LedgerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*LedgerUpdate_BatchMarker
	//	*LedgerUpdate_Consumed
	//	*LedgerUpdate_Created
	Op isLedgerUpdate_Op `protobuf_oneof:"op"`
}

func (x *LedgerUpdate) Reset() {
	*x = LedgerUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerUpdate) ProtoMessage() {}

func (x *LedgerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerUpdate.ProtoReflect.Descriptor instead.
func (*LedgerUpdate) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{30}
}

func (m *LedgerUpdate) GetOp() isLedgerUpdate_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *LedgerUpdate) GetBatchMarker() *LedgerUpdate_Marker {
	if x, ok := x.GetOp().(*LedgerUpdate_BatchMarker); ok {
		return x.BatchMarker
	}
	return nil
}

func (x *LedgerUpdate) GetConsumed() *LedgerSpent {
	if x, ok := x.GetOp().(*LedgerUpdate_Consumed); ok {
		return x.Consumed
	}
	return nil
}

func (x *LedgerUpdate) GetCreated() *LedgerOutput {
	if x, ok := x.GetOp().(*LedgerUpdate_Created); ok {
		return x.Created
	}
	return nil
}

type isLedgerUpdate_Op interface {
	isLedgerUpdate_Op()
}

type LedgerUpdate_BatchMarker struct {
	BatchMarker *LedgerUpdate_Marker `protobuf:"bytes,1,opt,name=batch_marker,json=batchMarker,proto3,oneof"`
}

type LedgerUpdate_Consumed struct {
	Consumed *LedgerSpent `protobuf:"bytes,2,opt,name=consumed,proto3,oneof"`
}

type LedgerUpdate_Created struct {
	Created *LedgerOutput `protobuf:"bytes,3,opt,name=created,proto3,oneof"`
}

func (*LedgerUpdate_BatchMarker) isLedgerUpdate_Op() {}

func (*LedgerUpdate_Consumed) isLedgerUpdate_Op() {}

func (*LedgerUpdate_Created) isLedgerUpdate_Op() {}

// OutputMetadata
type OutputMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId              *BlockId       `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	TransactionId        *TransactionId `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	OutputIndex          uint32         `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	IsSpent              bool           `protobuf:"varint,4,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	CommitmentIdSpent    *CommitmentId  `protobuf:"bytes,5,opt,name=commitment_id_spent,json=commitmentIdSpent,proto3" json:"commitment_id_spent,omitempty"`
	TransactionIdSpent   *TransactionId `protobuf:"bytes,6,opt,name=transaction_id_spent,json=transactionIdSpent,proto3" json:"transaction_id_spent,omitempty"`
	CommitmentIdIncluded *CommitmentId  `protobuf:"bytes,7,opt,name=commitment_id_included,json=commitmentIdIncluded,proto3" json:"commitment_id_included,omitempty"`
	LatestCommitmentId   *CommitmentId  `protobuf:"bytes,8,opt,name=latest_commitment_id,json=latestCommitmentId,proto3" json:"latest_commitment_id,omitempty"`
}

func (x *OutputMetadata) Reset() {
	*x = OutputMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputMetadata) ProtoMessage() {}

func (x *OutputMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputMetadata.ProtoReflect.Descriptor instead.
func (*OutputMetadata) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{31}
}

func (x *OutputMetadata) GetBlockId() *BlockId {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *OutputMetadata) GetTransactionId() *TransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *OutputMetadata) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *OutputMetadata) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *OutputMetadata) GetCommitmentIdSpent() *CommitmentId {
	if x != nil {
		return x.CommitmentIdSpent
	}
	return nil
}

func (x *OutputMetadata) GetTransactionIdSpent() *TransactionId {
	if x != nil {
		return x.TransactionIdSpent
	}
	return nil
}

func (x *OutputMetadata) GetCommitmentIdIncluded() *CommitmentId {
	if x != nil {
		return x.CommitmentIdIncluded
	}
	return nil
}

func (x *OutputMetadata) GetLatestCommitmentId() *CommitmentId {
	if x != nil {
		return x.LatestCommitmentId
	}
	return nil
}

// REST API
type APIRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route string `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Host  string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port  uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Path  string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *APIRouteRequest) Reset() {
	*x = APIRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRouteRequest) ProtoMessage() {}

func (x *APIRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRouteRequest.ProtoReflect.Descriptor instead.
func (*APIRouteRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{32}
}

func (x *APIRouteRequest) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *APIRouteRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *APIRouteRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *APIRouteRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type APIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  string            `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Path    string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *APIRequest) Reset() {
	*x = APIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest) ProtoMessage() {}

func (x *APIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest.ProtoReflect.Descriptor instead.
func (*APIRequest) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{33}
}

func (x *APIRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *APIRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *APIRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *APIRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type APIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    []byte            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *APIResponse) Reset() {
	*x = APIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIResponse) ProtoMessage() {}

func (x *APIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIResponse.ProtoReflect.Descriptor instead.
func (*APIResponse) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{34}
}

func (x *APIResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *APIResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *APIResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type LedgerUpdate_Marker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot          uint64                         `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	MarkerType    LedgerUpdate_Marker_MarkerType `protobuf:"varint,2,opt,name=marker_type,json=markerType,proto3,enum=inx.LedgerUpdate_Marker_MarkerType" json:"marker_type,omitempty"`
	ConsumedCount uint32                         `protobuf:"varint,3,opt,name=consumed_count,json=consumedCount,proto3" json:"consumed_count,omitempty"`
	CreatedCount  uint32                         `protobuf:"varint,4,opt,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
}

func (x *LedgerUpdate_Marker) Reset() {
	*x = LedgerUpdate_Marker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inx_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerUpdate_Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerUpdate_Marker) ProtoMessage() {}

func (x *LedgerUpdate_Marker) ProtoReflect() protoreflect.Message {
	mi := &file_inx_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerUpdate_Marker.ProtoReflect.Descriptor instead.
func (*LedgerUpdate_Marker) Descriptor() ([]byte, []int) {
	return file_inx_proto_rawDescGZIP(), []int{30, 0}
}

func (x *LedgerUpdate_Marker) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *LedgerUpdate_Marker) GetMarkerType() LedgerUpdate_Marker_MarkerType {
	if x != nil {
		return x.MarkerType
	}
	return LedgerUpdate_Marker_BEGIN
}

func (x *LedgerUpdate_Marker) GetConsumedCount() uint32 {
	if x != nil {
		return x.ConsumedCount
	}
	return 0
}

func (x *LedgerUpdate_Marker) GetCreatedCount() uint32 {
	if x != nil {
		return x.CreatedCount
	}
	return 0
}

var File_inx_proto protoreflect.FileDescriptor

var file_inx_proto_rawDesc = []byte{
	0x0a, 0x09, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x6e, 0x78,
	0x22, 0x0a, 0x0a, 0x08, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8f, 0x01, 0x0a,
	0x11, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xba,
	0x01, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xd1, 0x02, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x3c, 0x0a,
	0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x1b, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x22,
	0x4d, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x7b,
	0x0a, 0x15, 0x52, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x0d, 0x52,
	0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x1e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x76, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x10, 0x53, 0x6c, 0x6f, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x78, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x73, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x1b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x55, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x68, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x90, 0x13, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a,
	0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x78, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f,
	0x74, 0x78, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xc0, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x05, 0x12, 0x3e, 0x0a, 0x3a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e,
	0x45, 0x44, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x06, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x22, 0xb7, 0x0a, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x37, 0x0a,
	0x33, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x54, 0x58, 0x4f,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53,
	0x50, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x54, 0x58, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x4c, 0x0a, 0x48, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x53, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x05, 0x12, 0x3d, 0x0a, 0x39, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x06, 0x12, 0x42, 0x0a, 0x3e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x59, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x3a, 0x0a, 0x36, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x08, 0x12, 0x3a, 0x0a, 0x36, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x33,
	0x0a, 0x2f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x0a, 0x12, 0x38, 0x0a, 0x34, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x32, 0x0a,
	0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x3d, 0x0a, 0x39, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d,
	0x12, 0x3f, 0x0a, 0x3b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0e, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x50,
	0x55, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x11, 0x12, 0x37, 0x0a, 0x33,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x12, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x13, 0x12, 0x3d, 0x0a, 0x39, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x14, 0x12, 0x40, 0x0a, 0x3c, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x15, 0x12, 0x3a, 0x0a, 0x35, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0xff, 0x01, 0x22, 0x20, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x0b, 0x54, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x4c, 0x61, 0x7a, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6d, 0x69, 0x4c,
	0x61, 0x7a, 0x79, 0x22, 0x30, 0x0a, 0x0c, 0x54, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x52,
	0x04, 0x74, 0x69, 0x70, 0x73, 0x22, 0x4d, 0x0a, 0x11, 0x54, 0x69, 0x70, 0x73, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x68, 0x0a, 0x0a, 0x54, 0x69, 0x70, 0x73, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6e, 0x6f, 0x6e, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65,
	0x6d, 0x69, 0x4c, 0x61, 0x7a, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x1f,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x7f, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1f, 0x0a, 0x09, 0x52, 0x61, 0x77, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x6c, 0x6f, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x0c, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x78,
	0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70,
	0x22, 0xc9, 0x03, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x64, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0f,
	0x41, 0x50, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x78, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0xff, 0x08, 0x0a, 0x03, 0x49, 0x4e, 0x58, 0x12, 0x30, 0x0a, 0x0e, 0x52, 0x65, 0x61,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x69, 0x6e, 0x78,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x15,
	0x52, 0x65, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x54, 0x6f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78,
	0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x01,
	0x12, 0x2d, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0a, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x30, 0x01, 0x12,
	0x3d, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x3e,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12, 0x2a,
	0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d, 0x2e,
	0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0c, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0c, 0x2e,
	0x69, 0x6e, 0x78, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x12, 0x52,
	0x65, 0x61, 0x64, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x1a, 0x12, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x54, 0x6f, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x15, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x0a, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x12, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x49, 0x64, 0x1a, 0x13, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x69, 0x6e,
	0x78, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x50,
	0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x41, 0x50, 0x49,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x69,
	0x6e, 0x78, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x78, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x69, 0x6f, 0x74, 0x61, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x78,
	0x2f, 0x67, 0x6f, 0x3b, 0x69, 0x6e, 0x78, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_inx_proto_rawDescOnce sync.Once
	file_inx_proto_rawDescData = file_inx_proto_rawDesc
)

func file_inx_proto_rawDescGZIP() []byte {
	file_inx_proto_rawDescOnce.Do(func() {
		file_inx_proto_rawDescData = protoimpl.X.CompressGZIP(file_inx_proto_rawDescData)
	})
	return file_inx_proto_rawDescData
}

var file_inx_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_inx_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_inx_proto_goTypes = []interface{}{
	(BlockMetadata_BlockState)(0),               // 0: inx.BlockMetadata.BlockState
	(BlockMetadata_BlockFailureReason)(0),       // 1: inx.BlockMetadata.BlockFailureReason
	(BlockMetadata_TransactionState)(0),         // 2: inx.BlockMetadata.TransactionState
	(BlockMetadata_TransactionFailureReason)(0), // 3: inx.BlockMetadata.TransactionFailureReason
	(LedgerUpdate_Marker_MarkerType)(0),         // 4: inx.LedgerUpdate.Marker.MarkerType
	(*NoParams)(nil),                            // 5: inx.NoParams
	(*NodeConfiguration)(nil),                   // 6: inx.NodeConfiguration
	(*BaseToken)(nil),                           // 7: inx.BaseToken
	(*NodeStatus)(nil),                          // 8: inx.NodeStatus
	(*NodeStatusRequest)(nil),                   // 9: inx.NodeStatusRequest
	(*RawProtocolParameters)(nil),               // 10: inx.RawProtocolParameters
	(*RawCommitment)(nil),                       // 11: inx.RawCommitment
	(*CommitmentId)(nil),                        // 12: inx.CommitmentId
	(*CommitmentRequest)(nil),                   // 13: inx.CommitmentRequest
	(*SlotRangeRequest)(nil),                    // 14: inx.SlotRangeRequest
	(*Commitment)(nil),                          // 15: inx.Commitment
	(*CommitmentInfo)(nil),                      // 16: inx.CommitmentInfo
	(*CommitmentAndProtocolParameters)(nil),     // 17: inx.CommitmentAndProtocolParameters
	(*RawBlock)(nil),                            // 18: inx.RawBlock
	(*BlockId)(nil),                             // 19: inx.BlockId
	(*Block)(nil),                               // 20: inx.Block
	(*BlockWithMetadata)(nil),                   // 21: inx.BlockWithMetadata
	(*BlockMetadata)(nil),                       // 22: inx.BlockMetadata
	(*RawPayload)(nil),                          // 23: inx.RawPayload
	(*TipsRequest)(nil),                         // 24: inx.TipsRequest
	(*TipsResponse)(nil),                        // 25: inx.TipsResponse
	(*TipsMetricRequest)(nil),                   // 26: inx.TipsMetricRequest
	(*TipsMetric)(nil),                          // 27: inx.TipsMetric
	(*TransactionId)(nil),                       // 28: inx.TransactionId
	(*OutputId)(nil),                            // 29: inx.OutputId
	(*OutputResponse)(nil),                      // 30: inx.OutputResponse
	(*UnspentOutput)(nil),                       // 31: inx.UnspentOutput
	(*RawOutput)(nil),                           // 32: inx.RawOutput
	(*LedgerOutput)(nil),                        // 33: inx.LedgerOutput
	(*LedgerSpent)(nil),                         // 34: inx.LedgerSpent
	(*LedgerUpdate)(nil),                        // 35: inx.LedgerUpdate
	(*OutputMetadata)(nil),                      // 36: inx.OutputMetadata
	(*APIRouteRequest)(nil),                     // 37: inx.APIRouteRequest
	(*APIRequest)(nil),                          // 38: inx.APIRequest
	(*APIResponse)(nil),                         // 39: inx.APIResponse
	(*LedgerUpdate_Marker)(nil),                 // 40: inx.LedgerUpdate.Marker
	nil,                                         // 41: inx.APIRequest.HeadersEntry
	nil,                                         // 42: inx.APIResponse.HeadersEntry
}
var file_inx_proto_depIdxs = []int32{
	7,  // 0: inx.NodeConfiguration.base_token:type_name -> inx.BaseToken
	10, // 1: inx.NodeConfiguration.protocol_parameters:type_name -> inx.RawProtocolParameters
	15, // 2: inx.NodeStatus.latest_commitment:type_name -> inx.Commitment
	15, // 3: inx.NodeStatus.latest_finalized_commitment:type_name -> inx.Commitment
	12, // 4: inx.CommitmentRequest.commitment_id:type_name -> inx.CommitmentId
	12, // 5: inx.Commitment.commitment_id:type_name -> inx.CommitmentId
	11, // 6: inx.Commitment.commitment:type_name -> inx.RawCommitment
	12, // 7: inx.CommitmentInfo.commitment_id:type_name -> inx.CommitmentId
	15, // 8: inx.CommitmentAndProtocolParameters.commitment:type_name -> inx.Commitment
	10, // 9: inx.CommitmentAndProtocolParameters.current_protocol_parameters:type_name -> inx.RawProtocolParameters
	19, // 10: inx.Block.block_id:type_name -> inx.BlockId
	18, // 11: inx.Block.block:type_name -> inx.RawBlock
	22, // 12: inx.BlockWithMetadata.metadata:type_name -> inx.BlockMetadata
	18, // 13: inx.BlockWithMetadata.block:type_name -> inx.RawBlock
	19, // 14: inx.BlockMetadata.block_id:type_name -> inx.BlockId
	0,  // 15: inx.BlockMetadata.block_state:type_name -> inx.BlockMetadata.BlockState
	1,  // 16: inx.BlockMetadata.block_failure_reason:type_name -> inx.BlockMetadata.BlockFailureReason
	2,  // 17: inx.BlockMetadata.tx_state:type_name -> inx.BlockMetadata.TransactionState
	3,  // 18: inx.BlockMetadata.tx_failure_reason:type_name -> inx.BlockMetadata.TransactionFailureReason
	19, // 19: inx.TipsResponse.tips:type_name -> inx.BlockId
	12, // 20: inx.OutputResponse.latest_commitment_id:type_name -> inx.CommitmentId
	33, // 21: inx.OutputResponse.output:type_name -> inx.LedgerOutput
	34, // 22: inx.OutputResponse.spent:type_name -> inx.LedgerSpent
	12, // 23: inx.UnspentOutput.latest_commitment_id:type_name -> inx.CommitmentId
	33, // 24: inx.UnspentOutput.output:type_name -> inx.LedgerOutput
	29, // 25: inx.LedgerOutput.output_id:type_name -> inx.OutputId
	19, // 26: inx.LedgerOutput.blockId:type_name -> inx.BlockId
	32, // 27: inx.LedgerOutput.output:type_name -> inx.RawOutput
	33, // 28: inx.LedgerSpent.output:type_name -> inx.LedgerOutput
	28, // 29: inx.LedgerSpent.transaction_id_spent:type_name -> inx.TransactionId
	40, // 30: inx.LedgerUpdate.batch_marker:type_name -> inx.LedgerUpdate.Marker
	34, // 31: inx.LedgerUpdate.consumed:type_name -> inx.LedgerSpent
	33, // 32: inx.LedgerUpdate.created:type_name -> inx.LedgerOutput
	19, // 33: inx.OutputMetadata.block_id:type_name -> inx.BlockId
	28, // 34: inx.OutputMetadata.transaction_id:type_name -> inx.TransactionId
	12, // 35: inx.OutputMetadata.commitment_id_spent:type_name -> inx.CommitmentId
	28, // 36: inx.OutputMetadata.transaction_id_spent:type_name -> inx.TransactionId
	12, // 37: inx.OutputMetadata.commitment_id_included:type_name -> inx.CommitmentId
	12, // 38: inx.OutputMetadata.latest_commitment_id:type_name -> inx.CommitmentId
	41, // 39: inx.APIRequest.headers:type_name -> inx.APIRequest.HeadersEntry
	42, // 40: inx.APIResponse.headers:type_name -> inx.APIResponse.HeadersEntry
	4,  // 41: inx.LedgerUpdate.Marker.marker_type:type_name -> inx.LedgerUpdate.Marker.MarkerType
	5,  // 42: inx.INX.ReadNodeStatus:input_type -> inx.NoParams
	9,  // 43: inx.INX.ListenToNodeStatus:input_type -> inx.NodeStatusRequest
	5,  // 44: inx.INX.ReadNodeConfiguration:input_type -> inx.NoParams
	13, // 45: inx.INX.ReadCommitment:input_type -> inx.CommitmentRequest
	5,  // 46: inx.INX.ListenToLatestCommitments:input_type -> inx.NoParams
	5,  // 47: inx.INX.ListenToFinalizedCommitments:input_type -> inx.NoParams
	5,  // 48: inx.INX.ListenToBlocks:input_type -> inx.NoParams
	5,  // 49: inx.INX.ListenToAcceptedBlocks:input_type -> inx.NoParams
	5,  // 50: inx.INX.ListenToConfirmedBlocks:input_type -> inx.NoParams
	18, // 51: inx.INX.SubmitBlock:input_type -> inx.RawBlock
	19, // 52: inx.INX.ReadBlock:input_type -> inx.BlockId
	19, // 53: inx.INX.ReadBlockMetadata:input_type -> inx.BlockId
	23, // 54: inx.INX.SubmitPayload:input_type -> inx.RawPayload
	5,  // 55: inx.INX.ReadUnspentOutputs:input_type -> inx.NoParams
	14, // 56: inx.INX.ListenToLedgerUpdates:input_type -> inx.SlotRangeRequest
	29, // 57: inx.INX.ReadOutput:input_type -> inx.OutputId
	29, // 58: inx.INX.ReadOutputMetadata:input_type -> inx.OutputId
	37, // 59: inx.INX.RegisterAPIRoute:input_type -> inx.APIRouteRequest
	37, // 60: inx.INX.UnregisterAPIRoute:input_type -> inx.APIRouteRequest
	38, // 61: inx.INX.PerformAPIRequest:input_type -> inx.APIRequest
	8,  // 62: inx.INX.ReadNodeStatus:output_type -> inx.NodeStatus
	8,  // 63: inx.INX.ListenToNodeStatus:output_type -> inx.NodeStatus
	6,  // 64: inx.INX.ReadNodeConfiguration:output_type -> inx.NodeConfiguration
	15, // 65: inx.INX.ReadCommitment:output_type -> inx.Commitment
	16, // 66: inx.INX.ListenToLatestCommitments:output_type -> inx.CommitmentInfo
	16, // 67: inx.INX.ListenToFinalizedCommitments:output_type -> inx.CommitmentInfo
	20, // 68: inx.INX.ListenToBlocks:output_type -> inx.Block
	22, // 69: inx.INX.ListenToAcceptedBlocks:output_type -> inx.BlockMetadata
	22, // 70: inx.INX.ListenToConfirmedBlocks:output_type -> inx.BlockMetadata
	19, // 71: inx.INX.SubmitBlock:output_type -> inx.BlockId
	18, // 72: inx.INX.ReadBlock:output_type -> inx.RawBlock
	22, // 73: inx.INX.ReadBlockMetadata:output_type -> inx.BlockMetadata
	19, // 74: inx.INX.SubmitPayload:output_type -> inx.BlockId
	31, // 75: inx.INX.ReadUnspentOutputs:output_type -> inx.UnspentOutput
	35, // 76: inx.INX.ListenToLedgerUpdates:output_type -> inx.LedgerUpdate
	30, // 77: inx.INX.ReadOutput:output_type -> inx.OutputResponse
	36, // 78: inx.INX.ReadOutputMetadata:output_type -> inx.OutputMetadata
	5,  // 79: inx.INX.RegisterAPIRoute:output_type -> inx.NoParams
	5,  // 80: inx.INX.UnregisterAPIRoute:output_type -> inx.NoParams
	39, // 81: inx.INX.PerformAPIRequest:output_type -> inx.APIResponse
	62, // [62:82] is the sub-list for method output_type
	42, // [42:62] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_inx_proto_init() }
func file_inx_proto_init() {
	if File_inx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawProtocolParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitmentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitmentAndProtocolParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockWithMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TipsMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerSpent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inx_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerUpdate_Marker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_inx_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*OutputResponse_Output)(nil),
		(*OutputResponse_Spent)(nil),
	}
	file_inx_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*LedgerUpdate_BatchMarker)(nil),
		(*LedgerUpdate_Consumed)(nil),
		(*LedgerUpdate_Created)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inx_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inx_proto_goTypes,
		DependencyIndexes: file_inx_proto_depIdxs,
		EnumInfos:         file_inx_proto_enumTypes,
		MessageInfos:      file_inx_proto_msgTypes,
	}.Build()
	File_inx_proto = out.File
	file_inx_proto_rawDesc = nil
	file_inx_proto_goTypes = nil
	file_inx_proto_depIdxs = nil
}
